import pandas as pd

#In a dictionary of errors and values, this calculation accounts for the root sum of their individual errors, gaussian
def error_calc(d):
    d = d.assign(eterm = (d['errors']/d['values'])**2)
    d = d.assign(percenterror = sum(d['eterm'])**0.5)
    return d['percenterror'][0]

#manual addition of a data set and a list of tolerances, ,hoping to not manually filter this
def build_error():
    error_nflasks = {'5':0.02,'10':0.02,'25':0.03,'50':0.05,'100':0.08,'200':0.1,'250':0.12}
    error_wflasks = {'5':0.08,'10':0.08,'25':0.08,'50':0.08,'100':0.1,'200':0.2,'250':0.2}
    error_Vpip = {'0.5':0.006,'1':0.006,'2':0.006,'3':0.01,'5':0.01,'10':0.02}
    error_Mpip = {'5':0.3,'10':0.5,'20':0.8,'50':1.5,'100':2,'200':3,'1000':10,'5000':50,'10000':100}
    error_lst = [] 
    
    indices = pd.Series(['weight','v1','v2','v3','A'])
    d1 = pd.DataFrame({'values':[10,25,0.5,25,0.5],'errors':[0.2,0.03,0.006,0.03,0.004]}, index = indices)     #New 
    d2 = pd.DataFrame({'values':[2,25,3,25,0.5],'errors':[0.2,0.03,0.01,0.03,0.004]}, index = indices)  #old
    dlst = [d1,d2]
    
    for i in range(len(dlst)):
        error = error_calc(dlst[i])
        error_lst.append(error)
    return error_lst

build_error()
